<?php

namespace App\Controller\Admin;

use App\Entity\Lesson;
use App\Repository\ModuleRepository;
use App\Repository\StudentRepository;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\Security\Core\Security;

class LessonCrudController extends AbstractCrudController
{
    private $security;

    public function __construct(Security $security)
    {
        $this->security = $security;
    }

    public static function getEntityFqcn(): string
    {
        return Lesson::class;
    }


    public function configureFields(string $pageName): iterable
    {
        $teacherId = $this->getUser()->getTeacher();

        return [
            TextField::new('title', 'Titre'),
            TextField::new('goal', 'Objectif'),
            TextEditorField::new('content', 'Content'),
            ImageField::new('file', 'Ressources')
            ->setUploadDir('public/uploads/files')
            ->setBasePath('uploads/files')
            ->setUploadedFileNamePattern('[randomhash].[extension]')
            ->setRequired(false)
            ->onlyOnForms(),
            AssociationField::new('id_module', 'Module')
                ->setFormTypeOptions([
                    'by_reference' => false,
                    // Personnalisez la requête pour afficher uniquement les étudiants créés par le professeur
                    'query_builder' => function (ModuleRepository $moduleRepository) use ($teacherId) {
                        return $moduleRepository->createQueryBuilder('m')
                            ->where('m.id_teacher = :teacherId')
                            ->setParameter('teacherId', $teacherId);
                    }
                ])
        ];
    }

    public function createEntity(string $entityFqcn)
    {
        $lesson = new Lesson();

        $user = $this->security->getUser()->getTeacher();

        if ($user) {
            $lesson->setIdTeacher($user);
        }

        return $lesson; // TODO: Change the autogenerated stub
    }

    public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
    {
        $qb = parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters);

        // Supposons que vous avez un moyen d'obtenir l'ID de l'enseignant actuel,
        // par exemple à partir de l'utilisateur actuellement connecté
        $teacherId = $this->getUser()->getTeacher(); // Remplacez ceci par le code approprié pour obtenir l'ID de l'enseignant

        // Filtrer les étudiants pour n'inclure que ceux associés à l'enseignant spécifique
        $qb->andWhere('entity.id_teacher = :teacherId')
            ->setParameter('teacherId', $teacherId);

        return $qb;
    }

}
