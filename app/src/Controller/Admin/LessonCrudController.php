<?php

namespace App\Controller\Admin;

use App\Entity\Lesson;
use App\Repository\ModuleRepository;
use App\Repository\StudentRepository;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\Security\Core\Security;
use Symfony\Component\HttpFoundation\File\File;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;

class LessonCrudController extends AbstractCrudController
{
    private $security;

    public function __construct(Security $security)
    {
        $this->security = $security;
    }

    public static function getEntityFqcn(): string
    {
        return Lesson::class;
    }


    public function configureFields(string $pageName): iterable
    {
        $teacherId = $this->getUser()->getTeacher();

        return [
            TextField::new('title', 'Titre'),
            TextField::new('goal', 'Objectif'),
            TextEditorField::new('content', 'Contenue'),
            // CollectionField::new('files')
            // ->setEntryType(FileType::class)
            // ->setFormTypeOptions([
            //     'by_reference' => false,
            //     'allow_add' => true,
            //     'allow_delete' => true,
            //     'data_class' => null,
            // ])
            // ->setCustomOption('basePath', 'uploads/files')
            // ->setCustomOption('uploadDir', 'public/uploads/files'),
            ImageField::new('file', 'Ressources')
            ->setUploadDir('public/uploads/files')
            ->setBasePath('uploads/files')
            ->setUploadedFileNamePattern('[randomhash].[extension]')
            ->setRequired(false)
            ->onlyOnForms(),

            AssociationField::new('id_module', 'Matière')
                ->setFormTypeOptions([
                    'by_reference' => false,
                    // Personnalisez la requête pour afficher uniquement les étudiants créés par le professeur
                    'query_builder' => function (ModuleRepository $moduleRepository) use ($teacherId) {
                        return $moduleRepository->createQueryBuilder('m')
                            ->where('m.id_teacher = :teacherId')
                            ->setParameter('teacherId', $teacherId);
                    }
                ])
        ];
    }

    public function createEntity(string $entityFqcn)
    {
        $lesson = new Lesson();

        $user = $this->security->getUser()->getTeacher();

        if ($user) {
            $lesson->setIdTeacher($user);
        }

        return $lesson; // TODO: Change the autogenerated stub
    }


    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setPageTitle(Crud::PAGE_INDEX, 'Cours')
            ->setPageTitle(Crud::PAGE_NEW, 'Créer');
    }

    public function configureActions(Actions $actions): Actions
    {
        return $actions
            ->update(Crud::PAGE_INDEX, Action::NEW, function (Action $action) {
                return $action->setLabel('Créer');
            });
    }


    // public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    // {
    //     if ($entityInstance instanceof Lesson && !empty($entityInstance->getFiles())) {
    //         $files = $entityInstance->getFiles();
    //         $filePaths = $this->handleFileUploads($files);
    //         $entityInstance->setFiles($filePaths);
    //     }

    //     parent::persistEntity($entityManager, $entityInstance);
    // }

    // public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    // {
    //     if ($entityInstance instanceof Lesson && !empty($entityInstance->getFiles())) {
    //         $files = $entityInstance->getFiles();
    //         $filePaths = $this->handleFileUploads($files);
    //         $entityInstance->setFiles($filePaths);
    //     }

    //     parent::updateEntity($entityManager, $entityInstance);
    // }

    // private function handleFileUploads(array $files): array
    // {
    //     $filePaths = [];
    //     foreach ($files as $file) {
    //         if ($file instanceof UploadedFile) {
    //             $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
    //             $file->move($this->getParameter('files_directory'), $fileName);
    //             $filePaths[] = $fileName;
    //         } else {
    //             dump($file);
    //         }
    //     }
    //     return $filePaths;
    // }

    // private function generateUniqueFileName()
    // {
    //     return md5(uniqid());
    // }
    public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
    {
        $qb = parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters);

        // Supposons que vous avez un moyen d'obtenir l'ID de l'enseignant actuel,
        // par exemple à partir de l'utilisateur actuellement connecté
        $teacherId = $this->getUser()->getTeacher(); // Remplacez ceci par le code approprié pour obtenir l'ID de l'enseignant

        // Filtrer les étudiants pour n'inclure que ceux associés à l'enseignant spécifique
        $qb->andWhere('entity.id_teacher = :teacherId')
            ->setParameter('teacherId', $teacherId);

        return $qb;
    }


}
