<?php

namespace App\Controller\Admin;

use App\Entity\Test;
use App\Enum\QuizzType;
use App\Repository\StudentGroupRepository;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface;
use Symfony\Component\Security\Core\Security;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Response;

class TestCrudController extends AbstractCrudController
{
    private $security;
    private $authorizationChecker;
    private $adminUrlGenerator;
    private $entityManager;

    public function __construct(Security $security, AuthorizationCheckerInterface $authorizationChecker, AdminUrlGenerator $adminUrlGenerator, EntityManagerInterface $entityManager)
    {
        $this->security = $security;
        $this->authorizationChecker = $authorizationChecker;
        $this->adminUrlGenerator = $adminUrlGenerator;
        $this->entityManager = $entityManager;
    }

    public static function getEntityFqcn(): string
    {
        return Test::class;
    }


    public function configureFields(string $pageName): iterable
    {
        $teacherId = $this->getUser()->getTeacher();
        return [
            TextField::new('title', 'Titre'),
            TextField::new('description', 'Description'),
            AssociationField::new('modules', 'Matière')
                ->setCrudController(ModuleCrudController::class)
                ->formatValue(function ($value, $entity) {
                    $modules = $entity->getModules();
                    return implode(', ', $modules->map(function ($module) {
                        return $module->getName();
                    })->toArray());
                }),
            AssociationField::new('groups', 'Classes')
            ->setFormTypeOptions([
                'by_reference' => false,
                // Personnalisez la requête pour afficher uniquement les étudiants créés par le professeur
                'query_builder' => function (StudentGroupRepository $studentGroupRepository) use ($teacherId) {
                    return $studentGroupRepository->createQueryBuilder('s')
                        ->where('s.teacher = :teacherId')
                        ->setParameter('teacherId', $teacherId);
                }
            ]),
            ChoiceField::new('type', 'Type de Quizz')
                ->setChoices([
                    'QCM point négatif' => QuizzType::QCMN,
                    'QCM normal' => QuizzType::NORMAL,
                ]),
            DateTimeField::new('startDate', 'Date de début'),
            DateTimeField::new('endDate', 'Date de fin')
        ];
    }
    


    public function createEntity(string $entityFqcn)
    {
        $test = new Test();

        $user = $this->security->getUser()->getTeacher();

        if ($user) {
            $test->setIdTeacher($user);
        }

        return $test; // TODO: Change the autogenerated stub
    }


    public function configureActions(Actions $actions): Actions
    {
        $customAction = Action::new('customAction', 'Affichage Personnalisé')
            ->linkToCrudAction('myCustomAction'); // Nom de la méthode dans ce contrôleur

        $duplicateAction = Action::new('duplicateQuizz', 'Dupliquer')
            ->linkToCrudAction('duplicateQuizz');


        if (!$this->authorizationChecker->isGranted('ROLE_TEACHER')) {
            $actions
                ->remove(Crud::PAGE_INDEX, Action::NEW)
                ->remove(Crud::PAGE_INDEX, Action::EDIT)
                ->remove(Crud::PAGE_INDEX, Action::DELETE)
            ;
        }


        return $actions
            ->add(Crud::PAGE_INDEX, $customAction)
            ->add(Crud::PAGE_INDEX, $duplicateAction)
            ;
    }

    public function myCustomAction(AdminContext $context)
    {
        $testId = $context->getEntity()->getInstance()->getId();
        // Assurez-vous que 'quizz' est le nom de la route de votre nouveau contrôleur Symfony
        return $this->redirect($this->generateUrl('quizz', ['id' => $testId]));
    }
    
    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setPageTitle(Crud::PAGE_INDEX, 'Quizz')
            ->setPageTitle(Crud::PAGE_NEW, 'Créer');
    }

    public function configureAction(Actions $actions): Actions
    {
        return $actions
            ->update(Crud::PAGE_INDEX, Action::NEW, function (Action $action) {
                return $action->setLabel('Créer');
            });
    }

    public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
    {
        $qb = parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters);

        if (in_array('ROLE_TEACHER',$this->getUser()->getRoles())) {
            $teacherId = $this->getUser()->getTeacher();

            $qb->andWhere('entity.id_teacher = :teacherId')
                ->setParameter('teacherId', $teacherId);
        } else {
            // Récupérez la collection des groupes d'étudiants
            $studentGroups = $this->getUser()->getStudent()->getStudentGroupe();

            $modulesIds = [];
            // Itérez sur chaque groupe d'étudiants
            foreach ($studentGroups as $group) {
                // Pour chaque groupe, obtenez la collection des modules
                foreach ($group->getModules() as $module) {
                    // Ajoutez l'ID de chaque module à la liste des IDs
                    $modulesIds[] = $module->getId();
                }
            }

            // Assurez-vous qu'il y a des IDs de modules avant de les ajouter à la requête
            if (!empty($modulesIds)) {
                $qb->join('entity.modules', 'm')
                    ->andWhere($qb->expr()->in('m.id', ':modulesIds'))
                    ->setParameter('modulesIds', $modulesIds);
            }
        }

        return $qb;
    }

    public function duplicateQuizz(AdminContext $context)
    {
        // Récupérer l'entité originale
        $originalQuizz = $context->getEntity()->getInstance();

        // Créer une nouvelle instance de l'entité
        $newQuizz = clone $originalQuizz; // Assurez-vous que l'entité Test gère correctement le clonage, notamment pour les relations.

        // Modifier le nom du quizz
        $newQuizz->setTitle($originalQuizz->getTitle() . ' - copie');

        // Réinitialiser tout autre attribut si nécessaire
        // $newQuizz->setSomeField('value');

        // Enregistrer la nouvelle entité
        $this->entityManager->persist($newQuizz);
        $this->entityManager->flush();

        // Rediriger l'utilisateur vers la page d'édition du nouveau quizz
        return $this->redirect($this->adminUrlGenerator
            ->setController(self::class)
            ->setAction(Crud::PAGE_EDIT)
            ->setEntityId($newQuizz->getId())
            ->generateUrl());
    }

}
